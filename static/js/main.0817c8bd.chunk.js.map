{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.components.jsx","Components/Search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","monsters","map","monster","SearchBox","type","placeholder","onChange","App","state","fetch","then","response","json","users","setState","searchField","this","filterMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,GAAhC,4BAEL,6BAAoBJ,EAAMK,MAAjBL,EAAMI,IACf,4BAAIJ,EAAMM,YCPDC,EAAW,SAACP,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMQ,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAEEL,KAAMK,EAAQL,KACdD,GAAIM,EAAQN,GACZE,MAAOI,EAAQJ,OAHVI,EAAQN,UCJRO,G,MAAY,SAACX,GAAD,OACvB,qBAAKC,UAAU,SAAf,SACE,uBACEW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMc,eCoCPC,E,kDAvCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,IAHA,E,qDAOd,WAAqB,IAAD,OAClBS,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKC,SAAS,CACZd,SAAUa,EACVE,YAAa,U,oBAKrB,WAAU,IAAD,SAC2BC,KAAKR,MAA/BR,EADD,EACCA,SAAUe,EADX,EACWA,YACZE,EAAiBjB,EAASkB,QAAO,SAAChB,GAAD,OACrCA,EAAQL,KAAKsB,cAAcC,SAASL,EAAYI,kBAElD,OACE,sBAAK1B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CACEa,SAAU,SAACe,GACT,EAAKP,SAAS,CAAEC,YAAaM,EAAEC,OAAOC,SAExCnB,KAAK,SACLC,YAAY,mBAEd,cAAC,EAAD,CAAUL,SAAUiB,W,GAlCVO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0817c8bd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster\"\n      src={`https://robohash.org/${props.id}?set=set2&size=180x180`}\n    />\n    <h2 key={props.id}>{props.name}</h2>\n    <p>{props.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-;ist.styles.css\";\nimport { Card } from \"../card/card.component\";\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster) => (\n      <Card\n        key={monster.id}\n        name={monster.name}\n        id={monster.id}\n        email={monster.email}\n      />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = (props) => (\n  <div className=\"search\">\n    <input\n      type=\"search\"\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n    />\n  </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./Components/card-list/card-list.components\";\nimport { SearchBox } from \"./Components/Search-box/search-box.component\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) =>\n        this.setState({\n          monsters: users,\n          searchField: \"\",\n        })\n      );\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monster Search</h1>\n        <SearchBox\n          onChange={(e) => {\n            this.setState({ searchField: e.target.value });\n          }}\n          type=\"search\"\n          placeholder=\"search Monster\"\n        />\n        <CardList monsters={filterMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}